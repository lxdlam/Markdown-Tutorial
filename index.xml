<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Ramen's Box</title><link>https://blog.lxdlam.com/</link><description>Ramen's stuff box</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lxdlam@gmail.com (Ramen)</managingEditor><webMaster>lxdlam@gmail.com (Ramen)</webMaster><copyright>本站所有内容基于署名-非商业性使用-相同方式共享 4.0 国际协议（CC BY-NC-SA 4.0）给出许可</copyright><lastBuildDate>Tue, 03 Jan 2023 23:09:55 +0800</lastBuildDate><atom:link href="https://blog.lxdlam.com/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL N 个组中的 Top-K 问题</title><link>https://blog.lxdlam.com/post/a149ebee/</link><pubDate>Tue, 03 Jan 2023 23:09:55 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/a149ebee/</guid><description></description></item><item><title>PKU GeekGame 2022 题解</title><link>https://blog.lxdlam.com/post/8a92c50b/</link><pubDate>Sat, 26 Nov 2022 14:39:21 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/8a92c50b/</guid><description>&lt;p>只做到周三，然后因为上班咕咕了，后面的很多题有了想法也没做，随便记一下。&lt;/p></description></item><item><title>Hackergame 2022 题解</title><link>https://blog.lxdlam.com/post/6918ebb9/</link><pubDate>Fri, 28 Oct 2022 02:14:47 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/6918ebb9/</guid><description>&lt;p>今年又来了，由于这次很多题目 fuzz 部分非常多，本拍脑袋选手蒙出来不少可以做的东西，分数+排名都比去年好了很多，很开心。&lt;/p></description></item><item><title>任天堂 NPLN 服务架构演讲学习笔记</title><link>https://blog.lxdlam.com/post/24e3aa77/</link><pubDate>Mon, 10 Oct 2022 00:50:32 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/24e3aa77/</guid><description>&lt;p>NPLN 是任天堂的新一代的通用多人在线游戏网络系统，旨在替代自 3DS 时代就使用的 NEX 系统，采用全面的现代架构来进行开发，目标是在玩家无感知的情况下替换掉 NEX。NPLN 自 2018 年开始开发，全面基于 Google Cloud，并于 2021 年首先在《怪物猎人：崛起》中进行使用。&lt;/p></description></item><item><title>picoCTF 2022 Crypto Write-ups</title><link>https://blog.lxdlam.com/post/1f7260ad/</link><pubDate>Thu, 31 Mar 2022 19:54:08 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/1f7260ad/</guid><description>&lt;p>被拉来打的，只做了 Crypto。做啥写啥。&lt;/p></description></item><item><title>HTB Intro to Dante Writeups</title><link>https://blog.lxdlam.com/post/27e78a70/</link><pubDate>Wed, 16 Mar 2022 03:49:05 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/27e78a70/</guid><description>&lt;p>最近突然对渗透测试很感兴趣，充了个 htb 会员才发现基础不牢地动山摇，趁着会员快过期了先把 Intro to Dante Track 做完了，给报 Dante Pro Lab 打一下基础，之后先去 TryHackMe 学一手再回来开 htb 会员刷 Box。&lt;/p></description></item><item><title>XCPC 2021 补题 memo</title><link>https://blog.lxdlam.com/post/8697249c/</link><pubDate>Wed, 24 Nov 2021 00:22:34 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/8697249c/</guid><description><![CDATA[<p>闲着无聊做做，看看退役选手还能写出来些啥。</p>
<p>题解 memo，保持更新。<del>（反正应该没几天就腻了）</del></p>]]></description></item><item><title>Hackergame 2021 Writeups</title><link>https://blog.lxdlam.com/post/f37e3945/</link><pubDate>Sat, 30 Oct 2021 12:25:45 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/f37e3945/</guid><description>&lt;p>久仰 Hackergame 大名，虽然今年是预定摸了的，但是有个朋友拉我来打，打着打着我自己上头了，也就认真搞了。&lt;/p>
&lt;p>CTF noob 第一次打相关类型的比赛，幸好运气好拿到了 67 名的好成绩（至少对我这个水平来说）。学到很多东西，跟算法竞赛的体验还是不一样的，以后有时间可以多打。&lt;/p></description></item><item><title>Rust 的包装类型</title><link>https://blog.lxdlam.com/post/b63a9600/</link><pubDate>Tue, 24 Nov 2020 02:16:42 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/b63a9600/</guid><description><![CDATA[<p>对于一门对内存控制足够精细的语言来说，值类型与引用类型的区别是十分重要的：值类型通常意味着较低的拷贝成本，通常来说，这样的类型被分配在栈上（当然，对于 C/C++ 来说，我们可以在堆上直接分配一个值类型对象，如 <code>int</code>），而引用类型则通常分配在堆上，我们需要用一个包装过的对象去维护。</p>
<p>在 Rust 中，值类型和引用类型的界限在语言上提供了很明确的区分，而为了避免 C/C++ 中用户可以不受限制使用裸指针的情况，Rust 将很多裸指针操作都包在了 <code>unsafe</code> 块内，用户使用时必须对这种行为有足够的认知。当然，当用户需要使用指针，或者说引用类型的时候，Rust 也提供了 7 种包装类型来帮助用户更好的管理堆上的内存。</p>
<p>然而，Rust 官方教程和文档对这 7 种包装类型的介绍有很多容易混淆之处，同时网上的很多文章也已经完全脱离了最新版 Rust 的功能描述（如很多文章仍然描述 <code>Cell</code> 只接受实现了 <code>Copy</code> 的类型），导致很多初学者学习时容易产生迷惑和误用。这篇文章是我在复习 Rust 时重新学习包装类型相关时做出的笔记，希望能更好的帮助大家理解 Rust 的包装类型。</p>
<blockquote>
<p>本文写作时的 Rust 版本为 Stable Channel 1.48.0。</p>
</blockquote>]]></description></item><item><title>Educational DP 题解</title><link>https://blog.lxdlam.com/post/77ee4cf4/</link><pubDate>Tue, 28 Apr 2020 02:10:03 +0800</pubDate><author>Ramen</author><guid>https://blog.lxdlam.com/post/77ee4cf4/</guid><description><![CDATA[<p>这篇文章已经咕了一年了，原先的前言已经完全脱离时代了，在第一版到最终成文的期间过去了很多事情，趁现在毕业前夕有点时间迅速把坑给填了，也算是给大学和竞赛生涯画个句号吧。</p>
<p>这次的刷题对象是 AtCoder 的 <a href="https://atcoder.jp/contests/dp/tasks" target="_blank" rel="noopener noreffer ">Educational DP Round</a>。从简单到困难的问题都有，倒挺适合我这种不会 DP 的人的。</p>
<p>我的题解习惯是不贴代码的，所以下面所有的都是关于题目的讲解和方程的推导，要看代码参考<a href="https://github.com/lxdlam/CP-Answers/tree/master/AtCoder/EducationalDP" target="_blank" rel="noopener noreffer ">Github</a>或者<a href="https://atcoder.jp/contests/dp/submissions?f.Language=&amp;f.Status=AC&amp;f.Task=&amp;f.User=lxdlam&amp;page=1" target="_blank" rel="noopener noreffer ">提交页面</a>。</p>]]></description></item></channel></rss>